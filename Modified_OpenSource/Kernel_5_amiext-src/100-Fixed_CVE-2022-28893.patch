--- linux_patch099/fs/file_table.c	2022-06-01 14:13:23.624822510 +0800
+++ linux/fs/file_table.c	2022-06-01 14:14:31.328414838 +0800
@@ -375,6 +375,7 @@
 }
 
 EXPORT_SYMBOL(fput);
+EXPORT_SYMBOL(__fput_sync);
 
 void __init files_init(void)
 {
--- linux_patch099/net/sunrpc/xprt.c	2022-06-01 14:13:22.632828619 +0800
+++ linux/net/sunrpc/xprt.c	2022-06-01 14:15:44.355993771 +0800
@@ -863,10 +863,7 @@
 	if (!xprt_lock_write(xprt, task))
 		return;
 
-	if (test_and_clear_bit(XPRT_CLOSE_WAIT, &xprt->state))
-		xprt->ops->close(xprt);
-
-	if (!xprt_connected(xprt)) {
+	if (!xprt_connected(xprt) && !test_bit(XPRT_CLOSE_WAIT, &xprt->state)) {
 		task->tk_rqstp->rq_connect_cookie = xprt->connect_cookie;
 		rpc_sleep_on_timeout(&xprt->pending, task, NULL,
 				xprt_request_timeout(task->tk_rqstp));
--- linux_patch099/net/sunrpc/xprtsock.c	2022-06-01 14:13:22.628828644 +0800
+++ linux/net/sunrpc/xprtsock.c	2022-06-01 14:18:55.994963275 +0800
@@ -965,7 +965,7 @@
 
 	/* Close the stream if the previous transmission was incomplete */
 	if (xs_send_request_was_aborted(transport, req)) {
-		xs_close(xprt);
+		xprt_force_disconnect(xprt);
 		return -ENOTCONN;
 	}
 
@@ -1003,7 +1003,7 @@
 			-status);
 		/* fall through */
 	case -EPIPE:
-		xs_close(xprt);
+		xprt_force_disconnect(xprt);
 		status = -ENOTCONN;
 	}
 
@@ -1280,6 +1280,17 @@
 	if (sk == NULL)
 		return;
 
+	/*
+	 * Make sure we're calling this in a context from which it is safe
+	 * to call __fput_sync(). In practice that means rpciod and the
+	 * system workqueue.
+	 */
+	if (!(current->flags & PF_WQ_WORKER)) {
+		WARN_ON_ONCE(1);
+		set_bit(XPRT_CLOSE_WAIT, &xprt->state);
+		return;
+	}
+
 	if (atomic_read(&transport->xprt.swapper))
 		sk_clear_memalloc(sk);
 
@@ -1302,7 +1313,7 @@
 	mutex_unlock(&transport->recv_mutex);
 
 	trace_rpc_socket_close(xprt, sock);
-	fput(filp);
+	__fput_sync(filp);
 
 	xprt_disconnect_done(xprt);
 }
